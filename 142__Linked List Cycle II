public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        // Step 1: Detect cycle
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;

            if (fast == slow) { // Cycle detected
                int length = findCycleLength(slow);
                return findStart(head, length);
            }
        }
        return null; // No cycle
    }

    // Function to find cycle length
    private int findCycleLength(ListNode slow) {
        ListNode temp = slow;
        int length = 0;
        do {
            temp = temp.next;
            length++;
        } while (temp != slow);
        return length;
    }

    // Function to find cycle start
    private ListNode findStart(ListNode head, int length) {
        ListNode f = head, s = head;

        while (length > 0) { // Move s ahead by 'length' steps
            s = s.next;
            length--;
        }

        while (f != s) { // Move both pointers at the same speed
            f = f.next;
            s = s.next;
        }

        return s; // Start of the cycle
    }
}
