class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length; // Fixed .length() -> .length (since arrays use .length, not a method)
        
        // Edge cases
        if (n == 1) return nums[0]; // If there's only one element, return it
        if (nums[0] != nums[1]) return nums[0]; // First element is unique
        if (nums[n - 1] != nums[n - 2]) return nums[n - 1]; // Last element is unique
        
        int low = 1, high = n - 2;
        
        while (low <= high) {
            int mid = (low + high) / 2;
            
            // Fixed incorrect duplicate condition
            if (nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]) {
                return nums[mid]; // Found the unique element
            }

            // Fixed logical error in binary search condition
            if ((mid % 2 == 1 && nums[mid] == nums[mid - 1]) || 
                (mid % 2 == 0 && nums[mid] == nums[mid + 1])) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return -1; // Should never be reached
    }
}
