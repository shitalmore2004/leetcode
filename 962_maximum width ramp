class Solution {
    public int maxWidthRamp(int[] nums) {
        int n = nums.length;
        int maxWidth = 0;
        
        // Step 1: Use a stack to store indices of the array
        Stack<Integer> stack = new Stack<>();
        
        // Push all indices onto the stack
        for (int i = 0; i < n; i++) {
            // We want to keep the stack in decreasing order of values
            if (stack.isEmpty() || nums[i] < nums[stack.peek()]) {
                stack.push(i);
            }
        }
        
        // Step 2: Traverse the array from the end
        for (int j = n - 1; j >= 0; j--) {
            // While there are indices in the stack and the current value is >= nums[stack.peek()]
            while (!stack.isEmpty() && nums[j] >= nums[stack.peek()]) {
                maxWidth = Math.max(maxWidth, j - stack.pop());
            }
        }
        
        return maxWidth;
    
