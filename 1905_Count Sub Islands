class Solution {

    private boolean isSubland(int[][] grid1, int[][] grid2, int row, int col, int i, int j) {
        // Check for out of bounds or water in grid2
        if (i < 0 || j < 0 || i >= row || j >= col || grid2[i][j] == 0) {
            return true;
        }
        
        // If current cell in grid1 is 0, then grid2 cannot be a subland
        if (grid1[i][j] == 0) {
            return false;
        }
        
        // Mark the cell as visited
        grid2[i][j] = 0;
        
        // Recursively check all four directions
        boolean up = isSubland(grid1, grid2, row, col, i - 1, j); // up
        boolean down = isSubland(grid1, grid2, row, col, i + 1, j); // down
        boolean right = isSubland(grid1, grid2, row, col, i, j + 1); // right
        boolean left = isSubland(grid1, grid2, row, col, i, j - 1); // left
        
        return up && down && right && left;
    }

    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int row = grid1.length;
        int col = grid1[0].length;
        int subIslandCount = 0;
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                // If current cell in grid2 is land
                if (grid2[i][j] == 1 && isSubland(grid1, grid2, row, col, i, j)) {
                    subIslandCount++;
                }
            }
        }
        
        return subIslandCount;
    }
}
