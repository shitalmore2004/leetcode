
public class Solution {
    public int minGroups(int[][] intervals) {
        // Step 1: Sort the intervals based on their start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        // Step 2: Create a min-heap to track the end times of groups
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        
        for (int[] interval : intervals) {
            int start = interval[0];
            int end = interval[1];
            
            // Step 3: Check if the current interval can fit into the existing groups
            if (!heap.isEmpty() && start > heap.peek()) {
                heap.poll();  // Remove the group with the earliest end time
            }
            
            // Step 4: Add the current interval's end time to the heap
            heap.offer(end);
        }
        
        // The number of groups needed is the size of the heap
        return heap.size();
    
