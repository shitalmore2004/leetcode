import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> output = new ArrayList<>();
        Arrays.sort(nums); // Sort the array first to use the two-pointer technique
        
        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicate values for the 'i' index to avoid redundant triplets
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            
            int start = i + 1;
            int end = nums.length - 1;
            
            while (start < end) {
                int sum = nums[i] + nums[start] + nums[end];
                
                if (sum == 0) {
                    output.add(Arrays.asList(nums[i], nums[start], nums[end]));
                    
                    // Skip duplicates for the 'start' index
                    while (start < end && nums[start] == nums[start + 1]) {
                        start++;
                    }
                    // Skip duplicates for the 'end' index
                    while (start < end && nums[end] == nums[end - 1]) {
                        end--;
                    }
                    
                    start++;
                    end--;
                } else if (sum > 0) {
                    end--;
                } else {
                    start++;
                }
            }
        }
        
        return output;
    }
}
