class Solution {
    public int maxArea(int[] height) {
        int left=0;
        int right=height.length-1;
        int max=0;
        while(left<right){
          int lh=height[left];
          int rh=height[right];
          int min_h=Math.min(lh,rh);
         max=Math.max(max,min_h*(right-left));
          if(lh<rh)
          left++;
          else
          right--;

        }
        return max;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int maxArea(int[] height) {
        int left=0;
        int right=height.length-1;
        int maxarea=0;
        while(left<right){
        
        int min_h=Math.min(height[left],height[right]);
        int width=right-left;
        int currarea =min_h*width;
         if(currarea>maxarea){
            maxarea=currarea;
         }
         if(height[left]<height[right]){
            left++;
         }else{
            right--;
         }

        }
        return maxarea;
    }

    /*int n= height.length;
    int maxarea=0;
    for( int i=0;i<n;i++){
    for(int j=i+1;j<n;j++){
      int h=Math.min(height[i],height[j]);
     int  w=j-i;
     int currarea=h*w;
      maxarea=Math.max(maxarea,currarea);
    }
    }
    return maxarea;*/
}
