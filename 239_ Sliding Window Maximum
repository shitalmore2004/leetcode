import java.util.*;

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) return new int[0];

        int n = nums.length;
        int[] result = new int[n - k + 1];  // Output array
        Deque<Integer> deque = new LinkedList<>(); // Stores indices of useful elements
        int index = 0;

        for (int i = 0; i < n; i++) {
            // 1️⃣ Remove elements that are out of this window
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.pollFirst();
            }

            // 2️⃣ Remove elements from the back that are smaller than the current element
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
                deque.pollLast();
            }

            // 3️⃣ Add the current element's index at the back of the deque
            deque.offerLast(i);

            // 4️⃣ Store the max (deque front) in result[] when the window reaches size k
            if (i >= k - 1) {
                result[index++] = nums[deque.peekFirst()];
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums = {1, 3, -1, -3, 5, 3, 6, 7};
        int k = 3;
        System.out.println(Arrays.toString(sol.maxSlidingWindow(nums, k))); 
        // Output: [3, 3, 5, 5, 6, 7]
    }
}
