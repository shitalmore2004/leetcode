class Solution {

    // Recursive function to search for the word in the board
    public boolean exists(char[][] board, int i, int j, char[] word_arr, int idx) {
        // Check if out of bounds, already visited, or not matching
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] == '*' || board[i][j] != word_arr[idx]) {
            return false;
        }

        // If we have matched all characters in the word
        if (idx == word_arr.length - 1) {
            return true;
        }

        // Store current value and mark as visited
        char ch = board[i][j];
        board[i][j] = '*';

        // Explore all directions
        boolean res = exists(board, i + 1, j, word_arr, idx + 1) ||
                      exists(board, i - 1, j, word_arr, idx + 1) ||
                      exists(board, i, j + 1, word_arr, idx + 1) ||
                      exists(board, i, j - 1, word_arr, idx + 1);

        // Unmark visited cell
        board[i][j] = ch;

        return res;
    }

    // Main function to check if the word exists in the board
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0 || word == null || word.length() == 0) {
            return false;
        }

        char[] word_arr = word.toCharArray();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                // Start searching from the current cell if it matches the first character of the word
                if (board[i][j] == word_arr[0] && exists(board, i, j, word_arr, 0)) {
                    return true;
                }
            }
        }
        return false; // Return false if the word is not found
    }
}
